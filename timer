# shellcheck shell=bash
@src std/oo

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao     

timer.ns(){
    case "$(uname)" in
        Darwin) perl -MTime::HiRes=time -e 'printf "%.9f\n", time' ;;  # Spent 20ms
        *) date +%s.%N;; # Spent 4ms
    esac
}

timer.make(){
    local t
    # t=$(date +%s)
    t=$(timer.ns)
    while [ $# -gt 0 ]; do
        eval "X_CMD_COM_X_BASH_TIMER_$1=($t)"
        shift
    done
}

timer.reset(){
    local timer=${O:-DEFAULT}
    # eval "export $timer=$(date +%s)"
    # eval "export X_CMD_COM_X_BASH_TIMER_$timer=($(timer.ns))" # export is a bug
    eval "X_CMD_COM_X_BASH_TIMER_$timer=($(timer.ns))"
}

timer(){
    local name="X_CMD_COM_X_BASH_TIMER_${O:-DEFAULT}" size start_time latest_time
    size="$(eval echo "\${#$name[@]}")"
    start_time="$(eval echo "\${$name[0]}")"
    latest_time="$(eval echo "\${$name[$size-1]}")"

    local end_time
    # end_time="$(date +%s)"
    end_time="$(timer.ns)"
    eval "$name+=($end_time)"

    if [ "$#" -gt 0 ]; then
        [ -n "$1" ] && [ "$1" != - ] && eval "$1=$(printf %f  "$(echo "$end_time - $latest_time" | bc)")"
        [ -n "$2" ] && [ "$2" != - ] && eval "$2=$(printf %f  "$(echo "$end_time - $start_time" | bc)")"
        [ -n "$3" ] && [ "$3" != - ] && eval "$3=$(printf %f  "$end_time")"
        return 0
    fi
    
    printf "%f\n%f\n%f\n" \
        "$(echo "$end_time - $latest_time" | bc)" \
        "$(echo "$end_time - $start_time" | bc)" \
        "$end_time"
}

timer.record(){
    local name="X_CMD_COM_X_BASH_TIMER_${O:-DEFAULT}"

    local end_time
    # end_time="$(date +%s)"
    end_time="$(timer.ns)"
    eval "$name+=($end_time)"
    printf "%f" "$end_time"
}

timer.elapsed(){
    local name="X_CMD_COM_X_BASH_TIMER_${O:-DEFAULT}" start_time
    start_time="$(eval echo "\${$name[0]}")"

    local end_time
    # end_time="$(date +%s)"
    end_time="$(timer.ns)"
    eval "$name+=($end_time)"
    
    # echo $(( end_time  - start_time ))
    printf "%f" "$(echo "$end_time - $start_time" | bc)"
}

timer.latest(){
    local name="X_CMD_COM_X_BASH_TIMER_${O:-DEFAULT}" size latest_time
    # disable
    size="$(eval echo "\${#$name[@]}")"
    latest_time="$(eval echo "\${$name[$size-1]}")"

    local end_time
    # end_time="$(date +%s)"
    end_time="$(timer.ns)"
    eval "$name+=($end_time)"
    
    # echo $(( end_time  - start_time ))
    echo "$end_time - $start_time" | bc
    printf "%f" "$(echo "$end_time - $latest_time" | bc)"
}

timer.free(){
    local name=${O:-DEFAULT}
    eval "$name="
}

timer.new(){
    # timer.make "$@"
    # while [ $# -gt 0 ]; do
    #     local obj=$1
    #     local method
    #     for func in $(typeset -F | cut -d ' ' -f 3 | grep "^timer.*" | grep -v -E "(make)|(new)" | cut -d ' ' -f 1); do
    #         local method=$(echo $func | cut -d '.' -f 2)
    #         eval "$obj.$method(){ O=$obj $func \"\$@\"; }"
    #     done
    #     shift
    # done
    oo.create_new_function timer "$@"
}

: <<'DOCTEST'
> REPEAT=3 timer.measure "sleep 1s"
1 1 1
DOCTEST
timer.measure(){
    # shellcheck disable=SC2034
    local start i
    local A=()
    # shellcheck disable=SC2034
    for i in $(seq "${REPEAT:-1}"); do
        timer.make start
        eval "$@" 1>/dev/null 2>&1
        A=("${A[@]}" "$(O=start timer.elapsed)")
        O=start timer.free
    done

    echo "${A[@]}"
}

timer.make DEFAULT
