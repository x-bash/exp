# shellcheck shell=bash

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao

# KV Cache Using File
kvcache.make(){
    local O="${1:?Provide Object name}" tmp
    tmp="$(mktemp)"
    rm "$tmp" && mkdir -p "$tmp"
    eval "$O=$tmp"
}

kvcache.new(){ 
    oo.create_new_function kvcache "$@";
}

kvcache.free(){
    local O="${O:?Provide Object name}"
    case "$O" in
        /);;
        /bin*);;
        *) rm -rf "$O"; return 0 ;;
    esac

    printf "Cache Folder provided to delete is considered critical. Please assure path is right and then remove it manually:\n%s\n" "$O"
}

kvcache.debug(){
    local IFS=
    [[ "$X_BASH_DEBUG" =~ (^|,)(std/)*cache($|,) ]] && printf "DBG: %s\n" "$@" >&2
}

kvcache.key2vkey(){
    local vkey key="${1:?"Provide key please"}"
    if [[ "$key" =~ ^[A-Za-z0-9_]+$ ]]; then
        printf "z%s" "${key}"
    else
        vkey=$(printf "%s" "$key" | base64 | tr "=" _)
        printf "b%s" "$vkey"
    fi
}

kvcache.vkey2key(){
    local key="${1:?"Provide vkey please"}"
    case "${key:0:1}" in
        z) printf "%s" "${key:1}" ;;
        b) printf "%s" "${key:1}" | tr "_" "=" | base64 -d ;;
        *) kvcache.debug "Invalid vkey: vkey should starts with z or b"; return 1 ;;
    esac
}

: <<'DOCTEST'
> kvcache.make abc; O=abc
> kvcache.get a; echo $?
1
> kvcache.put a 1
> kvcache.get a
1
> kvcache.get c :- 3
3
> kvcache.get c; echo $?
1
> kvcache.get t := 5
5
> kvcache.get t
5
> kvcache.get g :== echo $(( 3 ** 8 ))
6561
> kvcache.get f :=eval echo $(( 3 ** 6 ))
729
> kvcache.free
DOCTEST
kvcache.get(){
    local O="${O:?Provide Object name}"
    local dirpath="${!O:?Cache $O not defined}"
    local vkey key="${1:?Please provide key}"; shift
    vkey="$(kvcache.key2vkey "$key")" || return 1
    local keypath="$dirpath/$vkey"
    [ -f "$keypath" ] && { cat "$keypath"; return 0; }

    local op="${1}"; shift
    case $op in
        :=)     echo "$1"; printf "%s" "$1" >"$keypath";;
        :-)     echo "$1";;
        :?)     echo "$1" >&2; return 1;;
        :=eval | :==)    eval "$@" | tee "$keypath";;
        *)      return 1;;
    esac
}

kvcache.put(){
    local O="${O:?Provide Object name}"
    local dirpath="${!O:?Cache $O not defined}"
    local vkey key="${1:?Please provide key}"
    vkey="$(kvcache.key2vkey "$key")" || return 1
    local keypath="$dirpath/$vkey"
    local value="${2:?Please provide value}"
    printf "%s" "$value" >"$keypath"
}

kvcache.toJSON(){
    :
}

kvcache.keys(){
    :
}

kvcache.values(){
    :
}
