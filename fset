# shellcheck shell=bash

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao

: <<REQUIREMENT

fset:

fset.add() { :; } # Add files to set
fset.size() { :; }
fset.ls() { :; }
fset.length() { :; }
fset.grep() { :; }
fset.zip
fset.sort

creation:
create from bash, python project, java project, js project

code facility:
1. Number of code lines, comment lines, functions, classes
2. Test work
3. Tell what change in code. Function change. File Change.
4. Intelligent git comment

function:
Bash function
Java function
JS Function
Python Function

REQUIREMENT

fset.debug(){
    local IFS=
    [[ "$X_BASH_DEBUG" =~ (^|,)(std/)*fset($|,) ]] && printf "DBG: %s\n" "$@" >&2
}

fset.new(){
    @src oo
    oo.create_new_function fset "$@"  
}

fset.make() { 
    local O="${1:?Provide Object name}"
    eval "$O=( )"
} # Add files to set

fset.add() { 
    local O="${O:?Provide Object name}" f
    for f in "$@"; do
        # What if it is a softlink? What if it is a folder?
        if [ ! -f "$f" ]; then
            fset.debug "$f is not a regular file."
            return 1
        fi
    done
    eval "$O"'+=( "$@" )'
} # Add files to set

path.abs(){
    local p=${1:-.}
    if [ -f "$p" ]; then
        echo "$(cd "$(dirname "$p")" && pwd)/$(basename "$p")"
    else
        (cd "${1:-.}" && pwd)
    fi
}

fset.mutate(){
    local O="${O:?Provide Object name}" p i
    for i in $(seq $(fset.size)); do
        (( i-- ))
        eval "p=\${$O[$i]}"
        eval "p=\$(\"${1:?Provide function}\" \"$p\")"
        eval "$O[$i]=\"$p\""
        printf "%s\n" "$p"
    done
}

fset.mapf(){
    local O="${O:?Provide Object name}" p i
    for i in $(seq $(fset.size)); do
        (( i-- ))
        eval "p=\${$O[$i]}"
        eval "p=\$(\"${1:?Provide function}\" \"$p\")"
        printf "%s\n" "$p"
    done
}

fset.normalize(){
    fset.mutate path.abs
    # local O="${O:?Provide Object name}" p i
    # for i in $(seq $(fset.size)); do
    #     (( i-- ))
    #     eval "p=\${$O[$i]}"
    #     p=$(path.abs "$p")
    #     eval "$O[$i]=\"$p\""
    # done
}

fset.basename(){
    fset.mutate basename
    # local O="${O:?Provide Object name}" p i
    # for i in $(seq $(fset.size)); do
    #     (( i-- ))
    #     eval "p=\${$O[$i]}"
    #     p=$(basename "$p")
    #     eval "$O[$i]=\"$p\""
    # done
}

fset.size() { 
    local O="${O:?Provide Object name}"
    eval "printf %s \${#$O[@]}"
}

fset.ls() {
    local IFS=$'\n'
    eval "printf '%s\n' \"\${$O[@]}\""
}

fset.clear(){
    local O="${O:?Provide Object name}"
    eval "$O=( )"
}

# Notice, add quote to pass the glob pattern
fset.glob() {
    local i pattern IFS=$'\n'
    for i in $(fset.ls); do
        for pattern in "$@"; do
            [[ "$i" = $pattern ]] && printf "%s\n" "$i"
        done
    done
}

fset.grep() {
    local O="${O:?Provide Object name}"
    local i pattern IFS=$'\n'
    for i in $(fset.ls); do
        for pattern in "$@"; do
            [[ "$i" =~ ^$pattern$ ]] &&  printf "%s\n" "$i"
        done
    done
}

fset.zip() {
    local O="${O:?Provide Object name}"
    local outzip="${1:?zip file}"
    eval "zip "$outzip" \${$O[@]}"
}

fset.lines(){
    local O="${O:?Provide Object name}"
    printf "%d" $(cat $(fset.ls) 2>/dev/null | wc -l)
}

fset.uniq(){
    local O="${O:?Provide Object name}"
    local c=( "$(fset.ls | sort | uniq)" )
    eval "$O=( \"\${c[@]}\" )"
}

fset.sort(){
    fset.sort.by.name
}

fset.sort.by.name(){
    local O="${O:?Provide Object name}"
    local c=( "$(fset.ls | sort)" )
    eval "$O=( \"\${c[@]}\" )"
    [ "$1" == "-v" ] && fset.ls
}

fset.sort.by.mtime() {
    local O="${O:?Provide Object name}"
    local c=( "$(fset.ls | xargs ls -t)" )
    eval "$O=( \"\${c[@]}\" )"
    [ "$1" == "-v" ] && fset.ls
}

fset.sort.by.atime() {
    local O="${O:?Provide Object name}"
    local c=( "$(fset.ls | xargs ls -u)" )
    eval "$O=( \"\${c[@]}\" )"
    [ "$1" == "-v" ] && fset.ls
}

fset.sort.by.ctime() {
    local O="${O:?Provide Object name}"
    local c=( "$(fset.ls | xargs ls -U)" )
    eval "$O=( \"\${c[@]}\" )"
    [ "$1" == "-v" ] && fset.ls
}

fset.sort.by.size() {
    local O="${O:?Provide Object name}"
    local c=( "$(fset.ls | xargs ls -S)" )
    eval "$O=( \"\${c[@]}\" )"
    [ "$1" == "-v" ] && fset.ls
}
