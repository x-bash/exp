# shellcheck shell=bash

# author:       Li Junhao           edwin.jh.lee@gmail.com    edwinjhlee.github.io
# maintainer:   Li Junhao

@src std/oo

list_make(){
    local O=${1:?Provide list name}
    eval "export X_LIST2_$O=0"
}

# list.new(){
#     oo.create_new_function list "$@"
# }

list_free(){
    eval "unset $O"
}

list_debug(){
    local IFS=
    [[ "$X_BASH_DEBUG" =~ (^|,)(std/)*list($|,) ]] && printf "DBG: %s\n" "$@" >&2
}

list_size(){
    local O=${O:?Provide list name}
    eval "echo \$X_LIST2_$O"
}

list_isempty(){
    [ "$(list_size)" -eq 0 ]
}

list_last_idx(){
    echo $(($(list_size) - 1))
}

list_first(){
    if [ "$(list_size)" -gt 0 ]; then
        eval "echo \${${O:?Require Object Name}[0]}"
        return 0
    fi

    local O=${O:?Provide list name}
    local OO="X_LIST2_$O"

    if [ -z "$1" ]; then
        echo "No element" >&2
        return 1
    fi

    echo "$1"
    return 0
}

list_get(){
    local idx=${1:?Index}
    if [ "$idx" -ge "$(list_size)" ]; then
        echo "Index exceeds size" >&2
        return 1
    fi

    local O=${O:?Provide list name}
    local OO="X_LIST2_$O"
    eval "echo \$$OO_$idx"
    return 0
}

# refer arr.indexof in utils
list_index_of(){
    local i=0
    for elem in $(list_print); do
        if [ "$elem" = "$1" ]; then
            echo $i
            return 0
        fi
        ((i=i+1))
    done
    echo -1
    return 1
}

list_remove(){
    local idx=${1:?Index}
    if [ "$idx" -ge "$(list_size)" ]; then
        echo "Index exceeds size" >&2
        return 1
    fi

    local O=${O:?Provide list name}
    local OO="X_LIST2_$O"
    eval "unset $OO_$idx"
    return 0
}

list_shift(){
    if [ "$(list_size)" -le 0 ]; then
        echo "No element to shift" >&2
        return 1
    fi
    local O=${O:?Provide list name}
    local OO="X_LIST2_$O"
    eval "$O=( \"\${${O:?Require Object Name}[@]:1}\" )"
}

list_push(){
    for i in "$@"; do
        # echo $i
        O=$O list__push "$i"
    done
}

list__push(){
    # local code="${O:?Require Object Name}[\${#${O}[*]}]=$1"
    local code="${O:?Require Object Name}+=(\"$1\")"
    # echo "$code"
    eval "$code"
}

list_pop(){
    local last_idx
    last_idx=$(list.last_idx)
    # shellcheck disable=SC2181
    [ $? -ne 0 ] && return $?
    eval "$O=( \"\${${O:?Require Object Name}[@]:0:$last_idx}\" )"
}

list_top(){
    local last_idx
    last_idx=$(list.last_idx)
    # shellcheck disable=SC2181
    [ $? -ne 0 ] && return $?

    if [ "$last_idx" -ge 0 ]; then
        eval "echo \${${O:?Require Object Name}[$last_idx]}"
        return 0
    fi

    if [ -z "$1" ]; then 
        echo "No element to pop" >&2
        return 1
    fi
    echo "$1"
}

list_print(){
    eval "echo \"\${${O:?Require Object Name}[*]}\""
}

# Not worked in ash, dash
list_repr(){
    # echo "\"$(echo "$1" | sed s/\"/\\\\\"/g)\""
    # echo "\"${1//\"/\\\\\"}\""

    printf "( "
    for i in "$@"; do
        # printf "\"${i//\"/\\\"}\""
        printf '"%s" ' "${i//\"/\\\"}"
    done
    printf ")"
}
